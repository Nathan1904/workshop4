{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nathan_LK\\\\OneDrive\\\\Bureau\\\\workshop\\\\workshop4\\\\client\\\\src\\\\pages\\\\Home.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  // Utilisation du hook useState pour gérer l'état des données des articles (posts)\n  const [posts, setPosts] = useState([]);\n\n  // Récupération de la catégorie (cat) à partir de l'emplacement actuel\n  const cat = useLocation().search;\n\n  // Utilisation du hook useEffect pour effectuer une requête HTTP lors du chargement du composant ou lorsque la catégorie change\n  useEffect(() => {\n    // Fonction asynchrone fetchData pour effectuer la requête HTTP\n    const fetchData = async () => {\n      try {\n        // Envoi d'une requête GET avec axios pour obtenir des articles en fonction de la catégorie (cat)\n        const res = await axios.get(`/posts${cat}`);\n        // Mise à jour de l'état \"posts\" avec les données reçues\n        setPosts(res.data);\n      } catch (err) {\n        console.log(err); // Gestion des erreurs en cas de problème lors de la requête\n      }\n    };\n\n    fetchData(); // Appel de la fonction fetchData pour déclencher la requête au chargement du composant ou lors du changement de catégorie\n  }, [cat]); // Dépendance \"cat\" pour recharger les données lorsque la catégorie change\n\n  // Fonction getText pour extraire le texte du contenu HTML d'un article\n  const getText = html => {\n    const doc = new DOMParser().parseFromString(html, \"text/html\");\n    return doc.body.textContent;\n  };\n\n  // Rendu JSX du composant Home\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"posts\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `../upload/${post.img}`,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            className: \"link\",\n            to: `/post/${post.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: getText(post.desc)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Plus...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"TzsNNSvv6s01BLWRyLq0mkb3Xrg=\", false, function () {\n  return [useLocation];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","Link","useLocation","axios","jsxDEV","_jsxDEV","Home","_s","posts","setPosts","cat","search","fetchData","res","get","data","err","console","log","getText","html","doc","DOMParser","parseFromString","body","textContent","className","children","map","post","src","img","alt","fileName","_jsxFileName","lineNumber","columnNumber","to","id","title","desc","_c","$RefreshReg$"],"sources":["C:/Users/Nathan_LK/OneDrive/Bureau/workshop/workshop4/client/src/pages/Home.jsx"],"sourcesContent":["import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\n\nconst Home = () => {\n  // Utilisation du hook useState pour gérer l'état des données des articles (posts)\n  const [posts, setPosts] = useState([]);\n\n  // Récupération de la catégorie (cat) à partir de l'emplacement actuel\n  const cat = useLocation().search;\n\n  // Utilisation du hook useEffect pour effectuer une requête HTTP lors du chargement du composant ou lorsque la catégorie change\n  useEffect(() => {\n    // Fonction asynchrone fetchData pour effectuer la requête HTTP\n    const fetchData = async () => {\n      try {\n        // Envoi d'une requête GET avec axios pour obtenir des articles en fonction de la catégorie (cat)\n        const res = await axios.get(`/posts${cat}`);\n        // Mise à jour de l'état \"posts\" avec les données reçues\n        setPosts(res.data);\n      } catch (err) {\n        console.log(err); // Gestion des erreurs en cas de problème lors de la requête\n      }\n    };\n    fetchData(); // Appel de la fonction fetchData pour déclencher la requête au chargement du composant ou lors du changement de catégorie\n  }, [cat]); // Dépendance \"cat\" pour recharger les données lorsque la catégorie change\n\n  // Fonction getText pour extraire le texte du contenu HTML d'un article\n  const getText = (html) => {\n    const doc = new DOMParser().parseFromString(html, \"text/html\");\n    return doc.body.textContent;\n  };\n\n  // Rendu JSX du composant Home\n  return (\n    <div className=\"home\">\n      <div className=\"posts\">\n        {/* Mapping des articles récupérés pour les afficher */}\n        {posts.map((post) => (\n          <div className=\"post\" key={post.id}>\n            <div className=\"img\">\n              {/* Affichage de l'image de l'article avec le chemin relatif */}\n              <img src={`../upload/${post.img}`} alt=\"\" />\n            </div>\n            <div className=\"content\">\n              {/* Lien vers la page de l'article en utilisant l'ID de l'article */}\n              <Link className=\"link\" to={`/post/${post.id}`}>\n                <h1>{post.title}</h1>\n              </Link>\n              {/* Appel de la fonction getText pour afficher un extrait du contenu de l'article */}\n              <p>{getText(post.desc)}</p>\n              <button>Plus...</button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}